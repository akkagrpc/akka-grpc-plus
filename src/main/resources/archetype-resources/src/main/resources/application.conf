include "cluster"
include "grpc"
include "serialization"
include "persistence"
include "projection"
include "kafka"

akka {
  loglevel = DEBUG
  log-dead-letters-during-shutdown = off
  log-dead-letters = 0
}

movie-service {
  ask-timeout = 30 s
}

akka.http.server.preview.enable-http2 = on

akka {
  discovery {
    method = config
  }
}

movie-service.grpc.interface = "0.0.0.0"
akka.remote.artery.canonical.hostname = "0.0.0.0"
akka.management.http.hostname = "0.0.0.0"

akka.management.cluster.bootstrap.contact-point-discovery {
  service-name = "MovieService"
  discovery-method = config
  # boostrap filters ports with the same IP assuming they are previous instances running on the same node
  # unless a port is specified
  port-name = "management"
  required-contact-point-nr = 0
  # config service discovery never changes
  stable-margin = 1 ms
  # bootstrap without all the nodes being up
  contact-with-all-contact-points = false
}

akka.discovery.config.services = {
  MovieService = {
    endpoints = [
      { host = "0.0.0.0", port = 9101 },
      { host = "0.0.0.0", port = 9102 },
      { host = "0.0.0.0", port = 9103 }
    ]
  }
}

# common config for akka.kafka.producer.kafka-clients and akka.kafka.consumer.kafka-clients
kafka-connection-settings {
  bootstrap.servers = "kafka:9092"
}
akka.kafka.producer {
  kafka-clients = ${kafka-connection-settings}
}
akka.kafka.consumer {
  kafka-clients = ${kafka-connection-settings}
}

jdbc-connection-settings {
  url = "jdbc:postgresql://postgres-db:5432/movie?reWriteBatchedInserts=true"
  user = "movie"
  password = "movie"
}

movie-service.grpc.port = 8101
akka.remote.artery.canonical.port = 2551
akka.management.http.port = 9101